{
    "queries": [
        {
            "name": "-------------------------- Engagement-specific Queries --------------------------",
            "queryList": [
                {
                    "final": true,
                    "query": ""
                }
            ]
        },
        {
            "name": "List all high-valued nodes",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n {highvalue:true}) RETURN n"
                }
            ]
        },
        {
            "name": "List all owned nodes",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n {owned:true}) RETURN n"
                }
            ]
        },
        {
            "name": "List all owned computers",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c:Computer {owned:true}) RETURN c"
                }
            ]
        },
        {
            "name": "List all owned groups",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (g:Group {owned:true}) RETURN g"
                }
            ]
        },
        {
            "name": "List all owned users",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User {owned:true}) RETURN u"
                }
            ]
        },
        {
            "name": "List the groups of all owned users",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(:User {owned:true})-[:MemberOf*]->(:Group) RETURN p"
                }
            ]
        },
        {
            "name": "Set the groups of all owned users as owned",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(:User {owned:true})-[:MemberOf*]->(g:Group) SET g.owned = true RETURN p"
                }
            ]
        },
        {
            "name": "--------------------------- High-value-specific Queries ---------------------------",
            "queryList": [
                {
                    "final": true,
                    "query": ""
                }
            ]
        },
        {
            "name": "Remove inactive nodes from the list of high-value nodes",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n {highvalue:true, enabled:false}) SET n.highvalue = false, n.nothighvaluereason = 'Inactive' RETURN n"
                }
            ]
        },
        {
            "name": "Set DCSync principals as high-value nodes",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(n {highvalue:false})-[:MemberOf|GetChanges|GetChangesAll*]->(:Domain) SET n.highvalue = true, n.highvaluereason = 'DCSync Principal' RETURN p"
                }
            ]
        },
        {
            "name": "Set Local Admin or Reset Password principals as high-value nodes",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n {highvalue:false})-[:AdminTo|ForceChangePassword*]->(m) SET n.highvalue = true, n.highvaluereason = 'Local Admin or Reset Password Principal' RETURN n"
                }
            ]
        },
        {
            "name": "Set Unconstrained Delegation principals as high-value nodes",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n {highvalue:false, unconstraineddelegation:true}) SET n.highvalue = true, n.highvaluereason = 'Unconstrained Delegation Principal' RETURN n"
                }
            ]
        },
        {
            "name": "Set principals with privileges on Computers as high-value nodes",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n {highvalue:false})-[*]->(:Computer) SET n.highvalue = true, n.highvaluereason = 'Principal with Privileges on Computers' RETURN n"
                }
            ]
        },
        {
            "name": "Set members of high-value groups as high-value nodes",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n {highvalue:false})-[:MemberOf*]->(g:Group {highvalue:true}) SET n.highvalue = true, n.highvaluereason = 'Member of a High-Value Group' RETURN g"
                }
            ]
        },
        {
            "name": "Set the groups of high-value nodes as high-value nodes",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n {highvalue:true})-[:MemberOf*]->(g:Group {highvalue:false}) SET g.highvalue = true, g.highvaluereason = 'Contains High-Value Members' RETURN g"
                }
            ]
        },
        {
            "name": "---------------------------- Kerberos-related Queries ----------------------------",
            "queryList": [
                {
                    "final": true,
                    "query": ""
                }
            ]
        },
        {
            "name": "Find Kerberoastable users who have administrative rights",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u {hasspn:true})-[:AdminTo*]->(:Computer) RETURN u"
                }
            ]
        },
        {
            "name": "Find Kerberoastable users who are members of high-value groups",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=shortestPath((:User {hasspn:true})-[:MemberOf*1..]->(:Group {highvalue:true})) RETURN p"
                }
            ]
        },
        {
            "name": "Find Kerberoastable users with a path to Domain Admin",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=shortestPath((:User {hasspn:true})-[*1..]->(g:Group)) WHERE g.objectid =~ $domainAdminId RETURN p",
                    "props": {
                        "domainAdminId": "(?i)S-1-5-.*-512"
                    }
                }
            ]
        },
        {
            "name": "List all Kerberoastable users",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User {hasspn: true}) RETURN u"
                }
            ]
        },
        {
            "name": "List all users with an SPN/Find all Kerberoastable Users with passwords last set less than 5 years ago",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User {hassspn:true}) WHERE u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) AND NOT u.pwdlastset IN [-1.0, 0.0] RETURN u.name, u.pwdlastset order by u.pwdlastset "
                }
            ]
        },
        {
            "name": "List all users with an SPN/List all Kerberoastable users with passwords last set more than 5 years ago",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User {hasspn:true}) WHERE u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
                }
            ]
        },
        {
            "name": "List users that can be AS-REP roasted",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User {dontreqpreauth: true}) RETURN u"
                }
            ]
        },
        {
            "name": "----------------------------- Owned-related Queries -----------------------------",
            "queryList": [
                {
                    "final": true,
                    "query": ""
                }
            ]
        },
        {
            "name": "Find the shortest path to Domain Admins from an owned node",
            "queryList": [
                {
                    "final": false,
                    "query": "MATCH (g:Group) WHERE g.objectid =~ $domainAdminId RETURN g.name ORDER BY g.name DESC",
                    "props": {
                        "domainAdminId": "(?i)S-1-5-.*-512"
                    },
                    "title": "Select a Domain Admin group..."
                },
                {
                    "final": true,
                    "query": "MATCH p=shortestPath((n {owned:true})-[*1..]->(m:Group {name:$result})) WHERE n <> m RETURN p"
                }
            ],
            "requireNodeSelect": true
        },
        {
            "name": "Find the shortest path to a computer from an owned user",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=shortestPath((:User {owned:true})-[*1..]->(:Computer)) RETURN p"
                }
            ]
        },
        {
            "name": "Find the shortest path to a computer with Unconstrained Delegation enabled from an owned node",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=shortestPath((n {owned:true})-[*1..]->(c:Computer {unconstraineddelegation: true})) WHERE n <> c RETURN p"
                }
            ]
        },
        {
            "name": "Find the shortest path to a high-value node from an owned node",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=shortestPath((n {owned:true})-[*1..]->(m {highvalue:true})) WHERE n <> m RETURN p"
                }
            ]
        },
        {
            "name": "----------------------- Password/Session-related Queries -----------------------",
            "queryList": [
                {
                    "final": true,
                    "query": ""
                }
            ]
        },
        {
            "name": "Find all active Domain Admin sessions",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User)-[:MemberOf*]->(g:Group) WHERE g.objectid =~ $domainAdminId MATCH p=(:Computer)-[:HasSession*]->(u) RETURN p",
                    "props": {
                        "domainAdminId": "(?i)S-1-5-.*-512"
                    }
                }
            ]
        },
        {
            "name": "Find all sessions a user in a specific domain has",
            "queryList": [
                {
                    "final": false,
                    "query": "MATCH (d:Domain) RETURN d.name ORDER BY d.name",
                    "title": "Select source domain..."
                },
                {
                    "final": false,
                    "query": "MATCH (u:User {domain:$result}) RETURN u.name ORDER BY u.name",
                    "title": "Select source user..."
                },
                {
                    "final": true,
                    "query": "MATCH p=(:User {name:$result})-[:HasSession*]->(:Computer) RETURN p"
                }
            ],
            "requireNodeSelect": true
        },
        {
            "name": "Find all users with their password in the AD",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User) WHERE u.userpassword IS NOT NULL RETURN u"
                }
            ]
        },
        {
            "name": "Find all users with the keyword \"pass\" in their description field",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User) WHERE u.description =~ $regex RETURN u",
                    "props": {
                        "regex": "(?i).*pass.*"
                    }
                }
            ]
        },
        {
            "name": "Find users that have never logged on and account is still active",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User {enabled:true}) WHERE u.lastlogontimestamp = -1.0 RETURN u"
                }
            ]
        },
        {
            "name": "Find users that logged in within the last 90 days",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u"
                }
            ]
        },
        {
            "name": "Find users with passwords last set within the last 90 days",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
                }
            ]
        },
        {
            "name": "-------------------------- Recon-related Queries (Basic) --------------------------",
            "queryList": [
                {
                    "final": true,
                    "query": ""
                }
            ]
        },
        {
            "name": "Return the name of every computer in the database where at least one SPN for the computer contains the string 'MSSQL'",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'MSSQL') RETURN c"
                }
            ]
        },
        {
            "name": "Show the groups of all high-value nodes",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(:User)-[:MemberOf*]->(:Group {highvalue:true}) RETURN p"
                }
            ]
        },
        {
            "name": "View all computers (Warning: Heavy)",
            "queryList": [
                {
                    "final": true,
                    "query": "Match (c:Computer) RETURN c"
                }
            ]
        },
        {
            "name": "View all GPOs (Warning: Heavy)",
            "queryList": [
                {
                    "final": true,
                    "query": "Match (g:GPO) RETURN g"
                }
            ]
        },
        {
            "name": "View all groups (Warning: Heavy)",
            "queryList": [
                {
                    "final": true,
                    "query": "Match (g:Group) RETURN g"
                }
            ]
        },
        {
            "name": "View all users (Warning: Heavy)",
            "queryList": [
                {
                    "final": true,
                    "query": "Match (u:User) RETURN u"
                }
            ]
        },
        {
            "name": "View all groups that contain the word 'admin'",
            "queryList": [
                {
                    "final": true,
                    "query": "Match (g:Group) WHERE g.name CONTAINS 'ADMIN' RETURN g"
                }
            ]
        },
        {
            "name": "----------------------- Recon-related Queries (Advanced) -----------------------",
            "queryList": [
                {
                    "final": true,
                    "query": ""
                }
            ]
        },
        {
            "name": "----------------------------- Computer-related Queries -----------------------------",
            "queryList": [
                {
                    "final": true,
                    "query": ""
                }
            ]
        },
        {
            "name": "Find all computers with Unconstrained Delegation",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c:Computer {unconstraineddelegation:true}) return c"
                }
            ]
        },
        {
            "name": "Find all computers with unsupported Operating Systems",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c:Computer) WHERE c.operatingsystem =~ $unsupportedOS RETURN c",
                    "props": {
                        "unsupportedOS": ".*(2000|2003|2008|xp|vista|7|me).*"
                    }
                }
            ]
        },
        {
            "name": "Find computers that allow Domain Users to RDP into",
            "queryList": [
                {
                    "final": true,
                    "query": "match p=(g:Group)-[:CanRDP*]->(c:Computer) WHERE g.objectid =~ $domainUserId return p",
                    "props": {
                        "domainUserId": "(?i)S-1-5-.*-513"
                    }
                }
            ]
        },
        {
            "name": "Find computers that allow Unconstrained Delegation that AREN’T domain controllers.",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c1:Computer)-[:MemberOf*]->(g:Group) WHERE g.objectid =~ $domainControllerId WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2",
                    "props": {
                        "domainControllerId": "(?i)S-1-5-.*-516"
                    }
                }
            ]
        },
        {
            "name": "Find computers with constrained delegation and the corresponding nodes where they allowed to delegate",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c"
                }
            ]
        },
        {
            "name": "------------------------- Domain/Forest-related Queries -------------------------",
            "queryList": [
                {
                    "final": true,
                    "query": ""
                }
            ]
        },
        {
            "name": "Find an node from domain 'A' that can do anything to a foreign node",
            "queryList": [
                {
                    "final": false,
                    "query": "MATCH (d:Domain) RETURN d.name ORDER BY d.name",
                    "title": "Select source domain..."
                },
                {
                    "final": true,
                    "query": "MATCH p=(n:Domain {domain:$result})-[*]->(m:Domain) WHERE n <> m RETURN p"
                }
            ],
            "requireNodeSelect": true
        },
        {
            "name": "Find an node in one domain that can do something to a foreign node",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(n:Domain)-[*]->(m:Domain) WHERE n <> m RETURN p"
                }
            ]
        },
        {
            "name": "------------------------------- Group-related Queries -------------------------------",
            "queryList": [
                {
                    "final": true,
                    "query": ""
                }
            ]
        },
        {
            "name": "Find groups that can reset passwords (Warning: Heavy)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(:Group)-[:ForceChangePassword*]->(:User) RETURN p"
                }
            ]
        },
        {
            "name": "Find groups that can RDP",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(:Group)-[:CanRDP*]->(:Computer) RETURN p"
                }
            ]
        },
        {
            "name": "Find groups that contain both users and computers",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (:Computer)-[:MemberOf*]->(groupsWithComps:Group) WITH groupsWithComps MATCH (:User)-[:MemberOf*]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers"
                }
            ]
        },
        {
            "name": "Find groups that have local admin rights (Warning: Heavy)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(:Group)-[:AdminTo*]->(:Computer) RETURN p"
                }
            ]
        },
        {
            "name": "Find rights that member of the Domain User group should not have on computers",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(g:Group)-[:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword*]->(:Computer) WHERE g.objectid =~ $domainUserId RETURN p",
                    "props": {
                        "domainUserId": "(?i)S-1-5-.*-513"
                    }
                }
            ]
        },
        {
            "name": "-------------------------------- User-related Queries --------------------------------",
            "queryList": [
                {
                    "final": true,
                    "query": ""
                }
            ]
        },
        {
            "name": "Find all users that are part of the VPN group",
            "queryList": [
                {
                    "final": true,
                    "query": "Match p=(:User)-[:MemberOf*]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' return p"
                }
            ]
        },
        {
            "name": "Find all users that have local admin rights",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(:User)-[:AdminTo*]->(:Computer) RETURN p"
                }
            ]
        },
        {
            "name": "Find constrained delegation",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(:User)-[:AllowedToDelegate*]->(:Computer) RETURN p"
                }
            ]
        },
        {
            "name": "Find if any domain user has interesting permissions against a GPO (Warning: Heavy)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(:User)-[:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*]->(:GPO) RETURN p"
                }
            ]
        },
        {
            "name": "Find if unprivileged users have rights to add members into groups",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=shortestPath((:User {admincount:False})-[:AddMember*1..]->(:Group)) RETURN p"
                }
            ]
        },
        {
            "name": "List all users with password not required",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User {passwordnotreqd:true}) RETURN u"
                }
            ]
        },
        {
            "name": "List the groups of all users with password not required",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(:User {passwordnotreqd:true})-[:MemberOf*]->(:Group) RETURN p"
                }
            ]
        }
    ]
}